/* value definition */
abstract typedef< <chr> > STRING;

/* operator definition */                                                         // note that implicit operations on sequences are hereby defined on strings
abstract length( STRING s )
postcondition		length == len(s) ;

abstract concat( STRING s1, STRING s2 )
postcondition		concat == s1 + s2 ;

abstract STRING substr( STRING s1, int i, int j )		// slicing, not checking whether a substring is present in main string
precondition		0 <= i < len(s1) ;
			0 < j  <= len(s1) - i ;
postcondition		substr == sub( s1, i, j ) ;

abstract int pos( STRING s1, STRING s2 )			// checking whether a substring is present in main string
postcondition		/* lastpos = len(s1) - len(s2)  */         // just naming the last position till where checking should be performed as another variable for neater writing
			(   (pos == -1) && (  for(i=0;i<=lastpos;i++) ( s2<>sub(s1, i, len(s2)) )  )   )
			||
			(   (pos>=0) && (pos<=lastpos)   &&  (  s2==sub(str1,pos,len(s2)  )   &&  (  for (i=0;i<pos;i++) ( s2<>sub(s1,i,len(s2)) )  ) ;

abstract int compare( STRING s1, STRING s2 )
postcondition		(   (compare == 0)  &&  (  (s1 == s2) == FALSE  )   )
			||
			(   (compare==1)  && ( s1==s2 )  ) ;

abstract copy( STRING s1, STRING  s2 )
postcondition		s1 == s2 ;

abstract copyn( STRING s1, STRING s2, int n)
postcondition		s1 == sub(s2, 0, n) ;

abstract STRING reverse(STRING s1)
postcondition		for(i=0; i<len(s1); i++) (reverse[i]==s1[len(s1)-1-i] ) ;

abstract int frequency(STRING s1, STRING s2)
postcondition		/* lastpos = len(s1) - len(s2)  */ 
			(    ( frequency==0 )  &&  (  for (i=0;i<=lastpos;i++) ( s2<>sub(s1,i,len(s2)) )  )    )
			||
			(     (frequency>0)    &&   (  for(i=0,count=0; i<=lastpos; i++, if(s2==sub(s1,i,len(s2)))(count++) ) () )  && (frequency==count)   ) ; 




